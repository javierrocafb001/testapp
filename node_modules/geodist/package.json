{
  "_from": "geodist",
  "_id": "geodist@0.2.1",
  "_inBundle": false,
  "_integrity": "sha1-lhml2TVSkzVxb6r60yIowp3AuSA=",
  "_location": "/geodist",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "geodist",
    "fetchSpec": "latest",
    "name": "geodist",
    "raw": "geodist",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/geodist/-/geodist-0.2.1.tgz",
  "_shasum": "9619a5d935529335716faafad32228c29dc0b920",
  "_spec": "geodist",
  "_where": "/home/administrator/app",
  "author": {
    "name": "Charles Moncrief"
  },
  "bugs": {
    "url": "https://github.com/cmoncrief/geodist/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Simple geographic distance calculator",
  "devDependencies": {
    "coffee-script": "~1.4.0",
    "mocha": "~1.7.4"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/cmoncrief/geodist#readme",
  "keywords": [
    "coordinates",
    "distance",
    "geo",
    "haversine",
    "mileage"
  ],
  "license": "MIT",
  "main": "lib/geodist.js",
  "name": "geodist",
  "optionalDependencies": {},
  "readme": "# Geodist\n\nA fast and simple geographical distance calculator. This module calculates\n\"as the crow flies\" distance between two points using the [haversine formula](http://en.wikipedia.org/wiki/Haversine_formula).\n\n## Installation\n\nInstall using npm:\n\n    $ npm install geodist\n\n## Example\n\nTo get the mileage between two points, pass in the coordinates in decimal\nformat.\n\n    var geodist = require('geodist')\n\n    var dist = geodist({lat: 41.85, lon: -87.65}, {lat: 33.7489, lon: -84.3881})\n    console.log(dist)           \n    // => 587\n\n## Usage\n\n#### geodist(start, end, [options])\n\nThe following options are supported:\n\n* `unit`   - Return results in the unit of measurement. Defaults to miles, see below for available types.\n* `format` - Return results as a string with the measurement type. Defaults to false.\n* `exact`  - Return exact results as a floating point. Defaults to false.\n* `limit`  - Specify a maximum distance here and `true` will be returned if the distance is less, or `false` if it is exceeded.\n\nThe following types are accepted in the `unit` option:\n\n* `miles` or `mi`\n* `yards`\n* `feet`\n* `kilometers` or `km`\n* `meters`\n\nExamples:\n\n    var geodist = require('geodist')\n\n    var tokyo = {lat: 35.6833, lon: 139.7667}    \n    var osaka = {lat: 34.6603, lon: 135.5232}\n\n    geodist(tokyo, osaka)                                // => 249\n\n    geodist(tokyo, osaka, {exact: true, unit: 'km'})     // => 402.09212137829695\n\n    geodist(tokyo, osaka, {format: true, unit: 'feet'})  // => 1319614 feet\n \n    geodist(tokyo, osaka, {limit: 200})                  // => false \n\n    geodist(tokyo, osaka, {limit: 250})                  // => true \n\n## Coordinate formats\n\nCoordinates are always in decimal format and can be passed in one of three\nways:\n\n##### An object hash with explicit lat/lon keys:\n\n    var dist = geodist({lat: 41.85, lon: -87.65}, {lat: 33.7489, lon: -84.3881})\n\n##### An object hash with arbitrary keys (in lat/lon order):\n\n    var dist = geodist({x: 41.85, y: -87.65}, {latitude: 33.7489, longitude: -84.3881})\n\n##### An array (in lat/lon order):\n\n    var dist = geodist([41.85, -87.65], [33.7489, -84.3881])\n\n## Running the tests\n\nTo run the test suite, invoke the following commands in the repository:\n\n    $ npm install\n    $ npm test\n\n## Acknowledgements\n\nThanks to [Movable Type](http://www.movable-type.co.uk/scripts/latlong.html) for supplying\nthe initial JavaScript implementation of the haversine formula that this is based on.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cmoncrief/geodist.git"
  },
  "scripts": {
    "prepublish": "cake build",
    "test": "cake test"
  },
  "version": "0.2.1"
}
